version: '3.8'

services:
  # PostgreSQLデータベース
  postgres:
    image: postgres:15-alpine
    container_name: questboard-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-questboard}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - questboard-network

  # Redisキャッシュ
  redis:
    image: redis:7-alpine
    container_name: questboard-redis
    restart: unless-stopped
    command: >
      --requirepass ${REDIS_PASSWORD:-redis123}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - questboard-network

  # Elasticsearch (検索エンジン)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: questboard-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - questboard-network

  # バックエンドAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: questboard-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3001
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      ADMIN_EMAILS: ${ADMIN_EMAILS}
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-questboard}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      # Elasticsearch
      ELASTICSEARCH_NODE: http://elasticsearch:9200
      # Email
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      # Sentry
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - backend_logs:/app/logs
      - quest_data:/app/data/quests
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    networks:
      - questboard-network

  # フロントエンド
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001/api}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL:-ws://localhost:3001}
    container_name: questboard-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - questboard-network

  # データベース管理ツール (開発環境用)
  adminer:
    image: adminer:4.8.1
    container_name: questboard-adminer
    restart: unless-stopped
    profiles:
      - dev
    depends_on:
      - postgres
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    networks:
      - questboard-network

  # バックアップサービス
  backup:
    image: postgres:15-alpine
    container_name: questboard-backup
    profiles:
      - backup
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        pg_dump -h postgres -U ${DB_USER:-postgres} ${DB_NAME:-questboard} | gzip > /backups/questboard_backup_$$(date +%Y%m%d_%H%M%S).sql.gz;
        find /backups -name 'questboard_backup_*.sql.gz' -mtime +7 -delete;
        sleep 86400;
      done"
    networks:
      - questboard-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  backend_logs:
    driver: local
  quest_data:
    driver: local

networks:
  questboard-network:
    driver: bridge