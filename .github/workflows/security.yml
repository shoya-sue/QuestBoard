name: Security Scanning

on:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run npm audit
        run: |
          echo "### Backend Dependencies ###"
          cd backend && npm audit --json > ../backend-audit.json || true
          cd ..
          echo "### Frontend Dependencies ###"
          cd frontend && npm audit --json > ../frontend-audit.json || true

      - name: Check for critical vulnerabilities
        run: |
          # Check backend
          if [ -f backend-audit.json ]; then
            BACKEND_CRITICAL=$(jq '.metadata.vulnerabilities.critical' backend-audit.json)
            BACKEND_HIGH=$(jq '.metadata.vulnerabilities.high' backend-audit.json)
            echo "Backend: Critical=$BACKEND_CRITICAL, High=$BACKEND_HIGH"
            if [ "$BACKEND_CRITICAL" -gt 0 ]; then
              echo "❌ Critical vulnerabilities found in backend"
              exit 1
            fi
          fi
          
          # Check frontend
          if [ -f frontend-audit.json ]; then
            FRONTEND_CRITICAL=$(jq '.metadata.vulnerabilities.critical' frontend-audit.json)
            FRONTEND_HIGH=$(jq '.metadata.vulnerabilities.high' frontend-audit.json)
            echo "Frontend: Critical=$FRONTEND_CRITICAL, High=$FRONTEND_HIGH"
            if [ "$FRONTEND_CRITICAL" -gt 0 ]; then
              echo "❌ Critical vulnerabilities found in frontend"
              exit 1
            fi
          fi

      - name: Upload audit reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-reports
          path: |
            backend-audit.json
            frontend-audit.json

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -f Dockerfile.backend -t questboard-backend:scan .
          docker build -f Dockerfile.frontend -t questboard-frontend:scan .

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'questboard-backend:scan'
          format: 'sarif'
          output: 'trivy-backend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'questboard-frontend:scan'
          format: 'sarif'
          output: 'trivy-frontend.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            trivy-backend.sarif
            trivy-frontend.sarif

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sast-scan:
    name: SAST with Semgrep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nodejs
          generateSarif: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: semgrep.sarif

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Check backend licenses
        working-directory: ./backend
        run: |
          npm ci
          license-checker --production --onlyAllow 'MIT;ISC;BSD-2-Clause;BSD-3-Clause;Apache-2.0;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense' > ../backend-licenses.txt || true

      - name: Check frontend licenses
        working-directory: ./frontend
        run: |
          npm ci
          license-checker --production --onlyAllow 'MIT;ISC;BSD-2-Clause;BSD-3-Clause;Apache-2.0;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense' > ../frontend-licenses.txt || true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            backend-licenses.txt
            frontend-licenses.txt

  security-report:
    name: Generate Security Report
    needs: [dependency-check, codeql-analysis, container-scan, secrets-scan, sast-scan]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Create security summary
        run: |
          echo "# Security Scan Summary" > security-report.md
          echo "Date: $(date)" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "## Scan Results" >> security-report.md
          echo "- Dependency Check: ${{ needs.dependency-check.result }}" >> security-report.md
          echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
          echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md